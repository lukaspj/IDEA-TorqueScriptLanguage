{
    parserClass="org.lukasj.idea.torquescript.parser.TSParser"
    
    // extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
    extends(".*expression")=expression
    
    psiClassPrefix="TS"
    psiImplClassSuffix="Impl"
    psiPackage="org.lukasj.idea.torquescript.psi"
    psiImplPackage="org.lukasj.idea.torquescript.psi.impl"
    
    elementTypeHolderClass="org.lukasj.idea.torquescript.psi.TSTypes"
    elementTypeClass="org.lukasj.idea.torquescript.psi.TSElementType"
    tokenTypeClass="org.lukasj.idea.torquescript.psi.TSTokenType"
}

torquescriptFile ::= (declaration | statement)*

// ---------------------------------------------------------------------------------------------------------------------
// Declarations

private declaration ::=
    function_declaration
    | package_declaration
    | namespace_declaration

package_declaration ::= PACKAGE IDENT LBRACE function_declaration* RBRACE STMT_SEPARATOR {pin=1}

function_declaration ::= FUNCTION function_identifier LPAREN params RPAREN statement_block {
    pin=1
    mixin="org.lukasj.idea.torquescript.psi.impl.TSFunctionStatementElementImpl"
    implements="org.lukasj.idea.torquescript.psi.TSNamedElement"
}

function_identifier ::= IDENT (COLON_COLON IDENT)?{
  pin=1
  mixin="org.lukasj.idea.torquescript.psi.impl.TSFunctionIdentifierElementImpl"
}

namespace_declaration ::= NAMESPACE IDENT LBRACE function_declaration* RBRACE {pin=1}

params ::= ((this_var_expression | local_var_expression) (COMMA local_var_expression)*)?

this_var_expression ::= THISVAR {
    mixin="org.lukasj.idea.torquescript.psi.impl.TSVarExpressionElementImpl"
}
local_var_expression ::= LOCALVAR {
    mixin="org.lukasj.idea.torquescript.psi.impl.TSVarExpressionElementImpl"
}

// ---------------------------------------------------------------------------------------------------------------------
// Statements

statement ::=
            comment_statement
            | if_statement
            | switch_statement
            | str_switch_statement
            | for_statement
            | foreach_statement
            | str_foreach_statement
            | do_while_statement
            | while_statement
            | break_statement
            | continue_statement
            | return_statement
            | assert_statement
            | singleton_statement
            | datablock_statement
            | expression_statement {pin=1}

// ---------------------------------------------------------------------------------------------------------------------
// Logical statements

if_statement ::= IF LPAREN expression RPAREN (statement_block | statement) else_statement? {pin=1}
else_statement ::= ELSE (statement_block | statement)
switch_statement ::= SWITCH LPAREN expression RPAREN LBRACE (comment_statement | case_block)+ default_block? RBRACE {pin=1}
str_switch_statement ::= STR_SWITCH LPAREN expression RPAREN LBRACE (comment_statement | case_block)+ default_block? RBRACE {pin=1}
case_block ::= CASE case_expression COLON statement* {pin=1}
case_expression ::= expression (CASEOR expression)*
default_block ::= DEFAULT COLON statement* {pin=1}
for_statement ::= FOR LPAREN expression? STMT_SEPARATOR expression? STMT_SEPARATOR expression? RPAREN (statement_block | statement) {pin=1}
foreach_statement ::= FOREACH LPAREN expression IN expression RPAREN (statement_block | statement) {pin=1}
str_foreach_statement ::= STR_FOREACH LPAREN expression IN expression RPAREN (statement_block | statement) {pin=1}
do_while_statement ::= DO (statement_block | statement) WHILE LPAREN expression RPAREN {pin=1}
while_statement ::= WHILE LPAREN expression RPAREN (statement_block | statement) {pin=1}
break_statement ::= BREAK STMT_SEPARATOR
continue_statement ::= CONTINUE STMT_SEPARATOR
return_statement ::= RETURN expression? STMT_SEPARATOR {pin=1}

statement_block ::= LBRACE statement* RBRACE {pin=1}

// ---------------------------------------------------------------------------------------------------------------------
// Type statements

singleton_statement ::= SINGLETON IDENT LPAREN (object_name parent_block?)? RPAREN new_instance_block? STMT_SEPARATOR {
    pin=1
    implements="org.lukasj.idea.torquescript.psi.TSObjectDeclaration"
    mixin="org.lukasj.idea.torquescript.psi.impl.TSObjectDeclarationElementImpl"
}

datablock_statement ::= DATABLOCK IDENT LPAREN object_name parent_block? RPAREN new_instance_block? STMT_SEPARATOR {
    pin=1
    implements="org.lukasj.idea.torquescript.psi.TSObjectDeclaration"
    mixin="org.lukasj.idea.torquescript.psi.impl.TSObjectDeclarationElementImpl"
}

field_assignment ::= property (LBRACK arguments RBRACK)? assignoperator expression {pin=1}
property ::= IDENT
           // Allow restricted keywords cause TorqueScript
           | DATABLOCK {
                           pin(".*")=1
                           mixin="org.lukasj.idea.torquescript.psi.impl.TSPropertyElementImpl"
                       }

// ---------------------------------------------------------------------------------------------------------------------
// Misc statements

comment_statement ::= LINE_COMMENT
          | DOC_COMMENT_BLOCK
          | BLOCK_COMMENT

assert_statement ::= ASSERT LPAREN expression (COMMA QUOTED_STRING)? RPAREN STMT_SEPARATOR {pin=1}

expression_statement ::= expression STMT_SEPARATOR

expression ::= assignment_expression
             | ternary_expression
             | new_instance_expression
             | prefix_unary_expression
             | postfix_unary_expression
             | binary_expression
             | qualifier_expression
             | call_expression
             | index_expression
             | literal_expression
             | ident_expression
             | var_expression
             | paren_expression


assignment_expression ::= ident_expression accessor_chain assignoperator expression
                        | var_expression accessor_chain? assignoperator expression {pin="assignoperator"}

assignoperator ::= ASSIGN
                 | ADD_ASSIGN
                 | SUBTRACT_ASSIGN
                 | MULTIPLY_ASSIGN
                 | DIVIDE_ASSIGN
                 | MODULO_ASSIGN
                 | BIT_AND_ASSIGN
                 | BIT_XOR_ASSIGN
                 | BIT_OR_ASSIGN
                 | BIT_SHIFT_LEFT_ASSIGN
                 | BIT_SHIFT_RIGHT_ASSIGN

ident_expression ::=
        (IDENT | PARENT) COLON_COLON IDENT
        | IDENT {
    pin="COLON_COLON"
    mixin="org.lukasj.idea.torquescript.psi.impl.TSIdentExpressionElementImpl"
}

var_expression ::= (THISVAR | LOCALVAR | GLOBALVAR) {
    mixin="org.lukasj.idea.torquescript.psi.impl.TSVarExpressionElementImpl"
}
paren_expression ::= LPAREN expression RPAREN {pin=1}

accessor_chain ::= qualifier_accessor | call_accessor | index_accessor

qualifier_expression ::= expression qualifier_accessor
qualifier_accessor ::= DOT property accessor_chain? {pin=1}
call_expression ::= expression call_accessor {
    mixin="org.lukasj.idea.torquescript.psi.impl.TSFunctionCallExpressionElementImpl"
}
call_accessor ::= LPAREN arguments RPAREN accessor_chain? {pin=1}
index_expression ::= expression index_accessor
index_accessor ::= LBRACK arguments RBRACK accessor_chain? {pin=1}

literal_expression ::= TRUE
          | FALSE
          | HEXDIGIT
          | INTEGER
          | FLOAT
          | QUOTED_STRING
          | TAGGED_STRING {
    mixin="org.lukasj.idea.torquescript.psi.impl.TSLiteralExpressionElementImpl"
}

binary_expression ::= expression binaryoperator expression
prefix_unary_expression ::= (NOT | MINUS) expression {pin=1}
postfix_unary_expression ::= expression (INCREMENT | DECREMENT) {pin=1}

ternary_expression ::= expression QUESTION_MARK expression COLON expression {pin=2}

arguments ::= (expression (COMMA expression)*)?

new_instance_expression ::= NEW IDENT LPAREN (object_name parent_block? (COMMA arguments)?)? RPAREN new_instance_block? {
    pin=1
    implements="org.lukasj.idea.torquescript.psi.TSObjectDeclaration"
    mixin="org.lukasj.idea.torquescript.psi.impl.TSObjectDeclarationElementImpl"
}
new_instance_block ::= LBRACE new_instance_stmt* RBRACE {
    pin=1
}

new_instance_stmt ::= (new_instance_expression | singleton_statement | field_assignment) STMT_SEPARATOR {
    pin=1
    recoverWhile="new_instance_stmt_recover"
}

private new_instance_stmt_recover  ::= !(RBRACE|IDENT|NEW)

object_name ::= expression
parent_block ::= COLON IDENT {
    mixin="org.lukasj.idea.torquescript.psi.impl.TSParentBlockElementImpl"
}

binaryoperator ::= EQUAL
                 | NOT_EQUAL
                 | GT_EQUAL
                 | GT
                 | LT_EQUAL
                 | LT
                 | AND
                 | OR
                 | STR_EQUAL
                 | STR_NOT_EQUAL
                 | BIT_SHIFT_LEFT
                 | BIT_SHIFT_RIGHT
                 | BIT_AND
                 | BIT_OR
                 | BIT_XOR
                 | BIT_NOT
                 | INTERNAL_NAME
                 | INTERNAL_NAME_RECURSIVE
                 | CONCATENATE
                 | PLUS
                 | MINUS
                 | MULTIPLY
                 | DIVIDE
                 | MODULO
                 | NL
                 | TAB
                 | SPC
