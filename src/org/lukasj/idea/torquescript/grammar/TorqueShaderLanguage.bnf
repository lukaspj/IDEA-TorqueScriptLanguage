{
    parserClass="org.lukasj.idea.torquescript.parser.TslParser"
    
    psiClassPrefix="Tsl"
    psiImplClassSuffix="Impl"
    psiPackage="org.lukasj.idea.torquescript.psi"
    psiImplPackage="org.lukasj.idea.torquescript.psi.impl"
    
    elementTypeHolderClass="org.lukasj.idea.torquescript.psi.TslTypes"
    elementTypeClass="org.lukasj.idea.torquescript.psi.TslElementType"
    tokenTypeClass="org.lukasj.idea.torquescript.psi.TslTokenType"

    extends(".*Expression")=expression
}

torqueshaderlanguageFile ::= TORQUESHADER IDENT LBRACE programGlobals RBRACE

programGlobals ::= programGlobalList

programGlobalList ::= structDecl programGlobalList?
                    | shaderStage programGlobalList?

shaderStage ::= VERTEX_SHADER LBRACE shaderBody RBRACE
              | PIXEL_SHADER LBRACE shaderBody RBRACE
              | GEOMETRY_SHADER LBRACE shaderBody RBRACE
              | COMPUTE_SHADER LBRACE shaderBody RBRACE

shaderBody ::= statementList

structDecl ::= STRUCT IDENT LBRACE structBodyList RBRACE

structBodyList ::= structMember structBodyList?

structMember ::= varType IDENT COLON structSemantic STMT_SEPARATOR
               | varType IDENT STMT_SEPARATOR
               | functionDef

uniformDecl ::= UNIFORM varDecl

staticConstDecl ::= STATIC varDecl
                  | STATIC CONST varDecl
                  | CONST varDecl

varDecl ::= varType IDENT STMT_SEPARATOR
          | varType IDENT ASSIGN expression STMT_SEPARATOR
          | varType IDENT LBRACK expression RBRACK STMT_SEPARATOR
          | varType IDENT LBRACK expression RBRACK ASSIGN LBRACE expressionList RBRACE STMT_SEPARATOR
          | IDENT IDENT STMT_SEPARATOR

paramModifier ::= IN
                | OUT
                | INOUT

functionDef ::= varType IDENT LPAREN functionParamList RPAREN LBRACE statementList RBRACE
              | varType IDENT LPAREN functionParamList RPAREN STMT_SEPARATOR
              | IDENT IDENT LPAREN functionParamList RPAREN LBRACE statementList RBRACE
              | IDENT IDENT LPAREN functionParamList RPAREN STMT_SEPARATOR

functionParamList ::= functionParam (COMMA functionParamList)?

functionParam ::= paramModifier varType IDENT
                | varType IDENT
                | IDENT IDENT
                | paramModifier IDENT IDENT

expressionList ::= expression
                 | expression COMMA expressionList

expression ::= binaryExpression
             | prefixUnaryExpression
             | postfixUnaryExpression
             | funcCallExpression
             | parenExpression
             | literalExpression
             | identExpression

literalExpression ::= LITERAL_INTEGER | LITERAL_FLOAT | LITERAL_DOUBLE | LITERAL_HEXDIGIT | TRUE | FALSE

identExpression ::= IDENT
parenExpression ::= LPAREN expression RPAREN

binaryExpression ::= expression (binaryOperator | assignOperator) expression
prefixUnaryExpression ::= expression (INCREMENT | DECREMENT | MEMBER_VAR)
postfixUnaryExpression ::= (NOT | MINUS | INCREMENT | DECREMENT) expression

funcCallExpression ::= MULFUNC LPAREN expression COMMA expression RPAREN
                 | FRACFUNC LPAREN expression RPAREN
                 | LERPFUNC LPAREN expression COMMA expression COMMA expression RPAREN
                 | SAMPLEFUNC LPAREN expression COMMA expression RPAREN
                 | varType LPAREN expression RPAREN
                 | IDENT LPAREN expression RPAREN

statementList ::= statement statementList?

statement ::= varDecl
            | uniformDecl
            | staticConstDecl
            | ifStatement
            | whileStatement
            | continueStatement
            | breakStatement
            | returnStatement
            | functionDef
            | expression STMT_SEPARATOR
            | switchStatement
            | discardStatement
            | structDecl
            | commentStatement

ifStatement ::= IF LPAREN expression RPAREN LBRACE statementList RBRACE ELSE LBRACE statementList RBRACE
              | IF LPAREN expression RPAREN LBRACE statementList RBRACE

whileStatement ::= WHILE LPAREN expression RPAREN LBRACE statementList RBRACE
                 | DO LBRACE statementList RBRACE WHILE LPAREN expression RPAREN

switchStatement ::= SWITCH LPAREN expression RPAREN LBRACE caseStatements RBRACE

caseStatements ::= caseRule caseStatements?

caseRule ::= CASE expression COLON statementList
           | DEFAULT COLON statementList

continueStatement ::= CONTINUE STMT_SEPARATOR

breakStatement ::= BREAK STMT_SEPARATOR

returnStatement ::= RETURN STMT_SEPARATOR
                  | RETURN expression STMT_SEPARATOR

discardStatement ::= DISCARD STMT_SEPARATOR

commentStatement ::= LINE_COMMENT | BLOCK_COMMENT

varType ::= MAT3X4
          | MAT4X3
          | MAT3X3
          | MAT4X4
          | FVEC2
          | FVEC3
          | FVEC4
          | IVEC2
          | IVEC3
          | IVEC4
          | BVEC2
          | BVEC3
          | BVEC4
          | FLOAT
          | INT
          | UINT
          | BOOL
          | SAMPLER2D
          | VOID

structSemantic ::= SV_POSITION
                 | POSITION
                 | NORMAL
                 | BINORMAL
                 | TANGENT
                 | TANGENTW
                 | TEXCOORD
                 | COLOR
                 | TARGET
                 | SV_DEPTH
                 | SV_ISFRONTFACE
                 | TESSFACTOR
                 | PSIZE

assignOperator ::= ASSIGN
                 | ADD_ASSIGN
                 | SUBTRACT_ASSIGN
                 | MULTIPLY_ASSIGN
                 | DIVIDE_ASSIGN
                 | MODULO_ASSIGN
                 | BIT_SHIFT_LEFT_ASSIGN
                 | BIT_SHIFT_RIGHT_ASSIGN
                 | BIT_AND_ASSIGN
                 | BIT_OR_ASSIGN
                 | BIT_XOR_ASSIGN

private binaryOperator ::= BIT_NOT
                 | BIT_SHIFT_LEFT
                 | BIT_SHIFT_RIGHT
                 | BIT_AND
                 | BIT_OR
                 | BIT_XOR
                 | AND
                 | OR
                 | NOT
                 | EQUAL
                 | NOT_EQUAL
                 | GT_EQUAL
                 | GT
                 | LT_EQUAL
                 | LT
                 | PLUS
                 | MINUS
                 | MULTIPLY
                 | DIVIDE
                 | MODULO
